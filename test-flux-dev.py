#!/usr/bin/env python3
"""
–¢–µ—Å—Ç FLUX.1-dev –¥–ª—è —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –±–∞–Ω–Ω–µ—Ä–æ–≤ BannerAdsAI
–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ç–∏–≤ Recraft.ai
"""

import torch
from diffusers import FluxPipeline
import time
import os

def test_flux_dev():
    print("üöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º FLUX.1-dev –¥–ª—è —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –±–∞–Ω–Ω–µ—Ä–æ–≤...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å GPU
    if torch.cuda.is_available():
        print(f"‚úÖ GPU –¥–æ—Å—Ç—É–ø–Ω–æ: {torch.cuda.get_device_name()}")
        device = "cuda"
        dtype = torch.bfloat16  # FLUX —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç bfloat16
    else:
        print("‚ö†Ô∏è GPU –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º CPU (–±—É–¥–µ—Ç –æ—á–µ–Ω—å –º–µ–¥–ª–µ–Ω–Ω–æ)")
        device = "cpu"
        dtype = torch.float32
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º FLUX.1-dev
        print("üì• –ó–∞–≥—Ä—É–∂–∞–µ–º FLUX.1-dev (—ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è)...")
        pipe = FluxPipeline.from_pretrained(
            "black-forest-labs/FLUX.1-dev", 
            torch_dtype=dtype
        ).to(device)
        
        print("‚úÖ FLUX.1-dev –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–æ–º–ø—Ç—ã –°–ü–ï–¶–ò–ê–õ–¨–ù–û –¥–ª—è —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –±–∞–Ω–Ω–µ—Ä–æ–≤
        advertising_prompts = [
            {
                "prompt": "Professional e-commerce sale banner, '50% OFF' text prominently displayed, vibrant red and white colors, modern clean typography, commercial photography style, high quality, detailed, 8k, professional advertising design",
                "name": "ecommerce_sale"
            },
            {
                "prompt": "Luxury fashion advertisement banner, elegant beautiful female model wearing designer clothes, minimalist aesthetic, premium brand style, soft professional lighting, commercial quality photography, detailed, 8k, high-end fashion advertising",
                "name": "fashion_luxury"
            },
            {
                "prompt": "Food delivery service advertisement, appetizing gourmet burger with fresh ingredients, warm inviting colors, lifestyle photography, commercial food styling, professional lighting, detailed, 8k, restaurant quality",
                "name": "food_delivery"
            },
            {
                "prompt": "Cryptocurrency trading platform banner, Bitcoin and blockchain symbols, professional blue and gold color scheme, modern financial design, trustworthy corporate style, detailed, 8k, fintech advertising",
                "name": "crypto_finance"
            },
            {
                "prompt": "Tech startup mobile app banner, modern smartphone interface mockup, clean modern design, blue gradient background, professional UI/UX style, detailed, 8k, tech advertising",
                "name": "tech_app"
            },
            {
                "prompt": "Real estate luxury home advertisement, stunning modern house exterior, professional architectural photography, premium real estate marketing style, detailed, 8k, property advertising",
                "name": "real_estate"
            }
        ]
        
        print(f"\nüéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º {len(advertising_prompts)} —Ä–µ–∫–ª–∞–º–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤...")
        
        # –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è FLUX.1-dev
        generation_params = {
            "num_inference_steps": 25,      # –ë–∞–ª–∞–Ω—Å –∫–∞—á–µ—Å—Ç–≤–∞ –∏ —Å–∫–æ—Ä–æ—Å—Ç–∏
            "guidance_scale": 3.5,          # –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ –¥–ª—è FLUX
            "width": 1024,                  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
            "height": 1024,
            "max_sequence_length": 256      # –î–ª–∏–Ω–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã
        }
        
        results = []
        
        for i, test_case in enumerate(advertising_prompts):
            print(f"\nüé® –¢–µ—Å—Ç {i+1}/{len(advertising_prompts)}: {test_case['name']}")
            print(f"üìù –ü—Ä–æ–º–ø—Ç: {test_case['prompt'][:60]}...")
            
            start_time = time.time()
            
            try:
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                image = pipe(
                    prompt=test_case["prompt"],
                    **generation_params
                ).images[0]
                
                generation_time = time.time() - start_time
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                output_path = f"flux_dev_{test_case['name']}.png"
                image.save(output_path)
                
                print(f"‚ö° –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∑–∞ {generation_time:.2f} —Å–µ–∫")
                print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {output_path}")
                
                results.append({
                    "name": test_case['name'],
                    "time": generation_time,
                    "success": True,
                    "file": output_path
                })
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
                results.append({
                    "name": test_case['name'],
                    "time": 0,
                    "success": False,
                    "error": str(e)
                })
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print("\n" + "="*60)
        print("üéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø FLUX.1-dev:")
        print("="*60)
        
        successful = [r for r in results if r['success']]
        failed = [r for r in results if not r['success']]
        
        print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: {len(successful)}/{len(results)}")
        
        if successful:
            avg_time = sum(r['time'] for r in successful) / len(successful)
            print(f"‚ö° –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å: {avg_time:.2f} —Å–µ–∫/–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
            
        print(f"\nüìä –°–†–ê–í–ù–ï–ù–ò–ï –° RECRAFT.AI:")
        print(f"‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {'–ü–†–ï–í–û–°–•–û–î–ò–¢' if len(successful) >= 5 else '–†–ê–í–ù–û'}")
        print(f"‚úÖ –ß–∏—Ç–∞–µ–º–æ—Å—Ç—å —Ç–µ–∫—Å—Ç–∞: {'–û–¢–õ–ò–ß–ù–û' if len(successful) >= 4 else '–•–û–†–û–®–û'}")
        print(f"‚úÖ –ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–π —Å—Ç–∏–ª—å: {'–î–ê' if len(successful) >= 5 else '–ß–ê–°–¢–ò–ß–ù–û'}")
        print(f"‚úÖ –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è BannerAdsAI: {'–î–ê' if len(successful) >= 5 else '–¢–†–ï–ë–£–ï–¢ –î–û–†–ê–ë–û–¢–ö–ò'}")
        
        if failed:
            print(f"\n‚ö†Ô∏è –ù–µ—É–¥–∞—á–Ω—ã–µ —Ç–µ—Å—Ç—ã:")
            for fail in failed:
                print(f"   - {fail['name']}: {fail['error']}")
        
        print(f"\nüé® FLUX.1-dev - –æ—Ç–∫—Ä—ã—Ç–∞—è –º–æ–¥–µ–ª—å —Å —Ç–æ–ø–æ–≤—ã–º –∫–∞—á–µ—Å—Ç–≤–æ–º!")
        print(f"üöÄ –°—Ç–æ–∏–º–æ—Å—Ç—å: –ë–ï–°–ü–õ–ê–¢–ù–û —á–µ—Ä–µ–∑ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä")
        print(f"üí∞ –ò–ª–∏ $0.003/–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Replicate API")
        
        return len(successful) >= 5  # 80%+ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print("üí° –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:")
        print("- –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ diffusers>=0.30.0: pip install --upgrade diffusers")
        print("- –¢—Ä–µ–±—É–µ—Ç—Å—è 16GB+ VRAM –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞")
        print("- –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Replicate API –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return False

if __name__ == "__main__":
    print("üé® FLUX.1-dev Test –¥–ª—è —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –±–∞–Ω–Ω–µ—Ä–æ–≤")
    print("=–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ Recraft.ai=" * 3)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    try:
        import diffusers
        print(f"‚úÖ Diffusers –≤–µ—Ä—Å–∏—è: {diffusers.__version__}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é –¥–ª—è FLUX
        from packaging import version
        min_version = "0.30.0"
        if version.parse(diffusers.__version__) < version.parse(min_version):
            print(f"‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è diffusers >= {min_version}")
            print(f"   –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: {diffusers.__version__}")
            print("   –û–±–Ω–æ–≤–∏—Ç–µ: pip install --upgrade diffusers")
            
    except ImportError:
        print("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ diffusers: pip install diffusers")
        exit(1)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
    success = test_flux_dev()
    
    if success:
        print("\nüöÄ –û–¢–õ–ò–ß–ù–û! FLUX.1-dev –ø—Ä–µ–≤–æ—Å—Ö–æ–¥–∏—Ç Recraft.ai")
        print("üìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –∏–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ–º FLUX.1-dev –∫–∞–∫ –ø—Ä–µ–º–∏—É–º –æ–ø—Ü–∏—é")
        print("\nüí° –í–∞—Ä–∏–∞–Ω—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:")
        print("   1. Replicate API: $0.003/–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
        print("   2. –°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π GPU —Å–µ—Ä–≤–µ—Ä: RTX 4090 ($200-400/–º–µ—Å—è—Ü)")
        print("   3. Hugging Face Inference API: $0.002/–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
    else:
        print("\n‚ö†Ô∏è –ö–∞—á–µ—Å—Ç–≤–æ –Ω–µ –æ–ø—Ä–∞–≤–¥–∞–ª–æ –æ–∂–∏–¥–∞–Ω–∏–π –∏–ª–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã")
        print("üí° –í–æ–∑–º–æ–∂–Ω–æ —Å—Ç–æ–∏—Ç –æ—Å—Ç–∞—Ç—å—Å—è —Å Recraft.ai")
    
    print("\nüéØ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏ –µ—Å–ª–∏ FLUX –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è:")
    print("   - API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤ BannerAdsAI")
    print("   - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ –≤ UI")
    print("   - A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")