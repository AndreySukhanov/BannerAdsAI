#!/usr/bin/env python3
"""
–¢–µ—Å—Ç Juggernaut XL –¥–ª—è —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –±–∞–Ω–Ω–µ—Ä–æ–≤ BannerAdsAI
–°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å Recraft.ai –ø–æ –∫–∞—á–µ—Å—Ç–≤—É –∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
"""

import replicate
import os
import base64
import requests
from io import BytesIO
from PIL import Image
import time

def test_juggernaut_xl():
    print("üé® –¢–µ—Å—Ç–∏—Ä—É–µ–º Juggernaut XL –¥–ª—è —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –±–∞–Ω–Ω–µ—Ä–æ–≤...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á
    api_token = os.getenv('REPLICATE_API_TOKEN')
    if not api_token:
        print("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ REPLICATE_API_TOKEN")
        print("üí° –ü–æ–ª—É—á–∏—Ç–µ –∫–ª—é—á –Ω–∞: https://replicate.com/account/api-tokens")
        return False
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç
    client = replicate.Client(api_token=api_token)
    
    try:
        print("üì° –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Juggernaut XL v7...")
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–æ–º–ø—Ç—ã –°–ü–ï–¶–ò–ê–õ–¨–ù–û –¥–ª—è —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –±–∞–Ω–Ω–µ—Ä–æ–≤
        advertising_prompts = [
            {
                "prompt": "Professional e-commerce sale banner, '50% OFF' text prominently displayed, vibrant red and white colors, modern clean typography, commercial photography style, high quality, detailed, 8k, professional advertising design",
                "name": "ecommerce_sale"
            },
            {
                "prompt": "Luxury fashion advertisement banner, elegant beautiful female model wearing designer clothes, minimalist aesthetic, premium brand style, soft professional lighting, commercial quality photography, detailed, 8k, high-end fashion advertising",
                "name": "fashion_luxury"
            },
            {
                "prompt": "Food delivery service advertisement, appetizing gourmet burger with fresh ingredients, warm inviting colors, lifestyle photography, commercial food styling, professional lighting, detailed, 8k, restaurant quality",
                "name": "food_delivery"
            },
            {
                "prompt": "Cryptocurrency trading platform banner, Bitcoin and blockchain symbols, professional blue and gold color scheme, modern financial design, trustworthy corporate style, detailed, 8k, fintech advertising",
                "name": "crypto_finance"
            },
            {
                "prompt": "Tech startup mobile app banner, modern smartphone interface mockup, clean modern design, blue gradient background, professional UI/UX style, detailed, 8k, tech advertising",
                "name": "tech_app"
            },
            {
                "prompt": "Real estate luxury home advertisement, stunning modern house exterior, professional architectural photography, premium real estate marketing style, detailed, 8k, property advertising",
                "name": "real_estate"
            }
        ]
        
        print(f"\nüéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º {len(advertising_prompts)} —Ä–µ–∫–ª–∞–º–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤...")
        
        # –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Juggernaut XL
        generation_params = {
            "width": 1024,
            "height": 1024,
            "guidance_scale": 7,
            "num_inference_steps": 40,
            "scheduler": "K_EULER_ANCESTRAL",
            "num_outputs": 1,
            "quality": 95,
            "format": "png"
        }
        
        results = []
        total_cost = 0
        cost_per_image = 0.0014  # ~$0.0014 –ø–æ –¥–∞–Ω–Ω—ã–º Replicate
        
        for i, test_case in enumerate(advertising_prompts):
            print(f"\nüé® –¢–µ—Å—Ç {i+1}/{len(advertising_prompts)}: {test_case['name']}")
            print(f"üìù –ü—Ä–æ–º–ø—Ç: {test_case['prompt'][:60]}...")
            
            start_time = time.time()
            
            try:
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Replicate API
                output = client.run(
                    "asiryan/juggernaut-xl-v7",
                    input={
                        "prompt": test_case["prompt"],
                        **generation_params
                    }
                )
                
                generation_time = time.time() - start_time
                total_cost += cost_per_image
                
                # –°–∫–∞—á–∏–≤–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                if output and len(output) > 0:
                    image_url = output[0]
                    response = requests.get(image_url)
                    
                    if response.status_code == 200:
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                        output_path = f"juggernaut_xl_{test_case['name']}.png"
                        
                        with open(output_path, 'wb') as f:
                            f.write(response.content)
                        
                        print(f"‚ö° –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∑–∞ {generation_time:.2f} —Å–µ–∫")
                        print(f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${cost_per_image:.4f}")
                        print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {output_path}")
                        
                        results.append({
                            "name": test_case['name'],
                            "time": generation_time,
                            "cost": cost_per_image,
                            "success": True,
                            "file": output_path,
                            "url": image_url
                        })
                    else:
                        raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {response.status_code}")
                else:
                    raise Exception("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
                results.append({
                    "name": test_case['name'],
                    "time": 0,
                    "cost": 0,
                    "success": False,
                    "error": str(e)
                })
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print("\n" + "="*70)
        print("üéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø JUGGERNAUT XL:")
        print("="*70)
        
        successful = [r for r in results if r['success']]
        failed = [r for r in results if not r['success']]
        
        print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: {len(successful)}/{len(results)}")
        
        if successful:
            avg_time = sum(r['time'] for r in successful) / len(successful)
            print(f"‚ö° –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å: {avg_time:.2f} —Å–µ–∫/–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
            print(f"üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–µ—Å—Ç–∞: ${total_cost:.4f}")
            print(f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${cost_per_image:.4f}")
            
        print(f"\nüìä –°–†–ê–í–ù–ï–ù–ò–ï –° –ö–û–ù–ö–£–†–ï–ù–¢–ê–ú–ò:")
        print(f"üÜö Juggernaut XL:  ${cost_per_image:.4f}/–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
        print(f"üÜö FLUX.1-dev:     $0.003/–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
        print(f"üÜö Recraft.ai:     $0.01/–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
        print(f"üÜö Nano Banana:    $0.039/–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
        print(f"üÜö SD 3.5 Large:   $0.065/–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
        
        print(f"\nüìà –û–¶–ï–ù–ö–ê –î–õ–Ø BANNERADSAI:")
        quality_score = len(successful) / len(results) * 100
        print(f"‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {quality_score:.1f}%")
        print(f"‚úÖ –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å API: {'–û–¢–õ–ò–ß–ù–û' if len(failed) == 0 else '–•–û–†–û–®–û'}")
        print(f"‚úÖ –¶–µ–Ω–æ–≤–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {'–û–¢–õ–ò–ß–ù–û' if cost_per_image < 0.005 else '–•–û–†–û–®–û'}")
        print(f"‚úÖ –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è BannerAdsAI: {'–î–ê' if len(successful) >= 5 else '–¢–†–ï–ë–£–ï–¢ –î–û–†–ê–ë–û–¢–ö–ò'}")
        
        if failed:
            print(f"\n‚ö†Ô∏è –ù–µ—É–¥–∞—á–Ω—ã–µ —Ç–µ—Å—Ç—ã:")
            for fail in failed:
                print(f"   - {fail['name']}: {fail['error']}")
        
        print(f"\nüé® Juggernaut XL - –æ—Ç–ª–∏—á–Ω–∞—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ —Å –Ω–∏–∑–∫–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç—å—é!")
        print(f"üöÄ –í 7 —Ä–∞–∑ –¥–µ—à–µ–≤–ª–µ Recraft.ai –ø—Ä–∏ —Å—Ö–æ–∂–µ–º –∫–∞—á–µ—Å—Ç–≤–µ")
        print(f"üí° –≠–∫–æ–Ω–æ–º–∏—è –∑–∞ 1000 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${(0.01 - cost_per_image) * 1000:.2f}")
        
        return len(successful) >= 5  # 80%+ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print("üí° –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:")
        print("- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ REPLICATE_API_TOKEN")
        print("- –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –Ω–∞–ª–∏—á–∏–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")
        print("- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–ª–∞–Ω—Å –Ω–∞ Replicate –∞–∫–∫–∞—É–Ω—Ç–µ")
        return False

if __name__ == "__main__":
    print("üé® Juggernaut XL Test –¥–ª—è BannerAdsAI")
    print("=–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ Recraft.ai=" * 3)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    try:
        import replicate
        print(f"‚úÖ Replicate library —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    except ImportError:
        print("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ replicate: pip install replicate")
        exit(1)
    
    try:
        import requests
        print(f"‚úÖ Requests library –¥–æ—Å—Ç—É–ø–Ω–∞")
    except ImportError:
        print("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ requests: pip install requests")
        exit(1)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
    success = test_juggernaut_xl()
    
    if success:
        print("\nüöÄ –û–¢–õ–ò–ß–ù–û! Juggernaut XL –ø–æ–∫–∞–∑–∞–ª –æ—Ç–ª–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
        print("üìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –∏–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ–º –∫–∞–∫ –±—é–¥–∂–µ—Ç–Ω—É—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É Recraft")
        print("\nüí° –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("   1. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Replicate API –≤ BannerAdsAI")
        print("   2. A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")
        print("   3. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ –ø–æ –±—é–¥–∂–µ—Ç—É")
    else:
        print("\n‚ö†Ô∏è –ö–∞—á–µ—Å—Ç–≤–æ –Ω–µ –æ–ø—Ä–∞–≤–¥–∞–ª–æ –æ–∂–∏–¥–∞–Ω–∏–π –∏–ª–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã")
        print("üí° –í–æ–∑–º–æ–∂–Ω–æ —Å—Ç–æ–∏—Ç –æ—Å—Ç–∞—Ç—å—Å—è —Å –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–º–∏ —Ä–µ—à–µ–Ω–∏—è–º–∏")
    
    print("\nüéØ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —ç–∫–æ–Ω–æ–º–∏—è –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ Juggernaut XL:")
    print("   üìä 1,000 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π/–º–µ—Å—è—Ü: —ç–∫–æ–Ω–æ–º–∏—è $8.6")
    print("   üìä 10,000 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π/–º–µ—Å—è—Ü: —ç–∫–æ–Ω–æ–º–∏—è $86")
    print("   üìä 100,000 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π/–º–µ—Å—è—Ü: —ç–∫–æ–Ω–æ–º–∏—è $860")