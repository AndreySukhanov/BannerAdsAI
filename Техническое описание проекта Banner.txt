Техническое описание проекта: BannerAdsAI

1. Обзор проекта
BannerAdsAI — это веб-приложение, предназначенное для автоматического создания профессиональных рекламных баннеров. Пользователь вводит URL своего сайта, выбирает параметры, и искусственный интеллект генерирует релевантные заголовки и визуальные креативы.

Основная цель: Максимально упростить и ускорить процесс создания рекламных материалов, сделав его доступным даже для пользователей без навыков дизайна.

2. Ключевая функциональность (Пользовательский сценарий)

Конфигурация (Шаг 1-3):

Пользователь вводит URL посадочной страницы.
Выбирает один из предустановленных размеров баннера (например, 300x250).
Выбирает цветовую схему (например, "синий фон + белый текст").
Генерация заголовков (Шаг 4):

На основе введенного URL и выбранных параметров, приложение обращается к AI-модели для анализа контента страницы.
Генерируются 3 уникальных заголовка в разных маркетинговых стилях (например: "прямая выгода", "решение проблемы", "призыв к действию").
Заголовки автоматически приводятся к верхнему регистру (КАПСЛОК).
Пользователь выбирает наиболее подходящий заголовок.
Генерация баннеров (Шаг 5):

Приложение генерирует 3 варианта фоновых изображений с помощью AI, основываясь на тематике сайта и выбранном заголовке.
На стороне клиента (в браузере) с помощью HTML5 Canvas на каждое сгенерированное изображение накладывается плашка с выбранным заголовком. Размер текста и высота плашки подбираются динамически для лучшей читаемости.
Пользователь видит готовые баннеры и может скачать их в формате .png.

3. Стек технологий

Фронтенд:

Язык: JavaScript (ES6+)
Фреймворк: React.js
Стилизация: Tailwind CSS
UI-компоненты: shadcn/ui
Анимации: framer-motion
Иконки: lucide-react
Рендеринг текста на изображениях: HTML5 Canvas API
Сборка: Vite

Бэкенд:

Платформа: Node.js + Express
База данных: Хранение в памяти (задачи и статистика)
AI-интеграции:
- OpenAI GPT-4o-mini: Для генерации текстового контента (заголовки, промпты для изображений)
- OpenAI DALL-E 3: Для генерации фоновых изображений
- Альтернативы: Stability AI, Together AI
Веб-скрапинг: JSDOM для анализа страниц
Мультиагентная система: Специализированные агенты для разных задач

Архитектура:

Multi-Agent система с координатором
REST API для взаимодействия фронтенда и бэкенда
Модульная архитектура с разделением ответственности

4. Структура проекта

Frontend (src/):
├── api/
│   ├── client.js               # API клиент для legacy endpoints
│   └── multi-agent-client.js   # API клиент для мультиагентной системы
│
├── components/
│   ├── generator/
│   │   ├── BannerStep.jsx      # Шаг 5: генерация и отображение баннеров
│   │   ├── HeadlineStep.jsx    # Шаг 4: генерация и выбор заголовков
│   │   └── ConfigurationStep.jsx # Шаги 1-3: конфигурация
│   └── ui/                     # shadcn/ui компоненты
│
├── pages/
│   ├── BannerGenerator.jsx     # Главная страница приложения
│   ├── Layout.jsx              # Глобальная обертка
│   └── index.jsx               # Индексная страница
│
└── hooks/                      # React хуки

Backend (backend/):
├── agents/                     # Мультиагентная система
│   ├── coordinator.js          # Координатор агентов
│   ├── webscraping-agent.js    # Агент анализа веб-страниц
│   ├── headline-agent.js       # Агент генерации заголовков
│   ├── image-agent.js          # Агент генерации изображений
│   └── banner-agent.js         # Агент сборки баннеров
│
├── routes/                     # API маршруты
│   ├── llm.js                  # Legacy LLM endpoint
│   ├── image-generation.js     # Legacy image generation
│   ├── file-upload.js          # Загрузка файлов
│   └── multi-agent.js          # Мультиагентные endpoints
│
├── utils/                      # Утилиты
│   ├── openai.js               # OpenAI интеграция
│   └── image-generation.js     # Генерация изображений
│
└── server.js                   # Основной сервер
5. Мультиагентная система

Архитектура:
Система построена на специализированных агентах, каждый из которых отвечает за определенную задачу:

WebScrapingAgent:
- Анализ и извлечение контента веб-страниц
- Определение языка контента (ru/en/fr/de/es)
- Извлечение заголовков, описаний, основного контента

HeadlineAgent:
- Генерация маркетинговых заголовков через OpenAI GPT-4o-mini
- Поддержка 5 языков (ru, en, fr, de, es)
- 3 стиля заголовков: прямая выгода, решение проблемы, призыв к действию
- Fallback механизм при сбоях API

ImageAgent:
- Генерация промптов для изображений
- Интеграция с DALL-E 3, Stability AI, Together AI
- Создание профессиональных фотореалистичных изображений

BannerAgent:
- Финальная сборка баннеров с метаданными
- Конфигурация наложения текста и цветовых схем
- Подготовка данных для Canvas рендеринга

Coordinator:
- Координация работы всех агентов
- Управление жизненным циклом задач
- Сбор статистики и обработка ошибок

Поток данных:
1. Пользователь вводит URL и выбирает параметры
2. WebScrapingAgent анализирует страницу
3. HeadlineAgent генерирует заголовки на основе контента
4. Пользователь выбирает заголовок
5. ImageAgent генерирует изображения
6. BannerAgent подготавливает метаданные баннеров
7. Frontend рендерит финальные баннеры через Canvas API

6. Установка и запуск

Требования:
- Node.js 18+
- OpenAI API ключ

Установка:

1. Клонирование репозитория:
```bash
git clone <repository-url>
cd banner-ads-ai
```

2. Установка зависимостей:
```bash
# Frontend
npm install

# Backend
cd backend
npm install
```

3. Настройка переменных окружения:
```bash
# backend/.env
OPENAI_API_KEY=your-openai-api-key
OPENAI_BASE_URL=https://api.openai.com/v1
OPENAI_CHAT_MODEL=gpt-4o-mini
PORT=3001
```

4. Запуск:
```bash
# Backend (терминал 1)
cd backend
npm run dev

# Frontend (терминал 2)
npm run dev
```

Приложение будет доступно по адресу http://localhost:5173

Деплой:
- Frontend: Vercel, Netlify, собственный сервер
- Backend: Railway, Render, VPS с Node.js
- Переменные окружения должны быть настроены в production