import fs from 'fs';
import path from 'path';
import crypto from 'crypto';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∫–µ—à–∞
const CACHE_DIR = path.join(__dirname, '../../data/brand-cache');
const CACHE_EXPIRY = 24 * 60 * 60 * 1000; // 24 —á–∞—Å–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–µ—à–∞
function initializeCache() {
  try {
    if (!fs.existsSync(CACHE_DIR)) {
      fs.mkdirSync(CACHE_DIR, { recursive: true });
      console.log('‚úÖ –ö–µ—à –±—Ä–µ–Ω–¥–∏–Ω–≥–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω:', CACHE_DIR);
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–µ—à–∞:', error);
  }
}

// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª—é—á –¥–ª—è –∫–µ—à–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ URL
function generateCacheKey(url) {
  try {
    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º URL (—É–±–∏—Ä–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, —è–∫–æ—Ä–∏, trailing slash)
    const normalizedUrl = new URL(url);
    const baseUrl = `${normalizedUrl.protocol}//${normalizedUrl.hostname}${normalizedUrl.pathname.replace(/\/$/, '')}`;
    
    // –°–æ–∑–¥–∞–µ–º SHA-256 —Ö–µ—à
    return crypto.createHash('sha256').update(baseUrl).digest('hex');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–∞ –∫–µ—à–∞:', error);
    return crypto.createHash('sha256').update(url).digest('hex');
  }
}

// –ü–æ–ª—É—á–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–µ—à–∞
function getCacheFilePath(cacheKey) {
  return path.join(CACHE_DIR, `${cacheKey}.json`);
}

// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏—Å—Ç–µ–∫ –ª–∏ –∫–µ—à
function isCacheExpired(timestamp) {
  return (Date.now() - timestamp) > CACHE_EXPIRY;
}

// –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –∫–µ—à
export function setBrandingCache(url, brandingData) {
  try {
    initializeCache();
    
    const cacheKey = generateCacheKey(url);
    const cacheFilePath = getCacheFilePath(cacheKey);
    
    const cacheEntry = {
      url: url,
      data: brandingData,
      timestamp: Date.now(),
      expiresAt: Date.now() + CACHE_EXPIRY
    };
    
    fs.writeFileSync(cacheFilePath, JSON.stringify(cacheEntry, null, 2), 'utf8');
    
    console.log(`üíæ –ë—Ä–µ–Ω–¥–∏–Ω–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∫–µ—à: ${url} -> ${cacheKey}`);
    return true;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∫–µ—à:', error);
    return false;
  }
}

// –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–µ—à–∞
export function getBrandingCache(url) {
  try {
    const cacheKey = generateCacheKey(url);
    const cacheFilePath = getCacheFilePath(cacheKey);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    if (!fs.existsSync(cacheFilePath)) {
      console.log(`üîç –ö–µ—à –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è: ${url}`);
      return null;
    }
    
    // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –∫–µ—à–∞
    const cacheData = fs.readFileSync(cacheFilePath, 'utf8');
    const cacheEntry = JSON.parse(cacheData);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
    if (isCacheExpired(cacheEntry.timestamp)) {
      console.log(`‚è∞ –ö–µ—à –∏—Å—Ç–µ–∫ –¥–ª—è: ${url}`);
      // –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –∫–µ—à
      try {
        fs.unlinkSync(cacheFilePath);
      } catch (unlinkError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ –∫–µ—à–∞:', unlinkError);
      }
      return null;
    }
    
    console.log(`‚úÖ –ö–µ—à –Ω–∞–π–¥–µ–Ω –¥–ª—è: ${url} (–≤–æ–∑—Ä–∞—Å—Ç: ${Math.round((Date.now() - cacheEntry.timestamp) / 1000 / 60)} –º–∏–Ω)`);
    return cacheEntry.data;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–µ—à–∞:', error);
    return null;
  }
}

// –û—á–∏—â–∞–µ—Ç –≤–µ—Å—å –∫–µ—à
export function clearBrandingCache() {
  try {
    if (!fs.existsSync(CACHE_DIR)) {
      return { cleared: 0, message: '–ö–µ—à –ø—É—Å—Ç' };
    }
    
    const files = fs.readdirSync(CACHE_DIR);
    let cleared = 0;
    
    for (const file of files) {
      if (file.endsWith('.json')) {
        try {
          fs.unlinkSync(path.join(CACHE_DIR, file));
          cleared++;
        } catch (unlinkError) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ ${file}:`, unlinkError);
        }
      }
    }
    
    console.log(`üßπ –û—á–∏—â–µ–Ω –∫–µ—à –±—Ä–µ–Ω–¥–∏–Ω–≥–∞: ${cleared} —Ñ–∞–π–ª–æ–≤`);
    return { cleared, message: `–£–¥–∞–ª–µ–Ω–æ ${cleared} —Ñ–∞–π–ª–æ–≤` };
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞:', error);
    return { cleared: 0, error: error.message };
  }
}

// –û—á–∏—â–∞–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∑–∞–ø–∏—Å–∏ –∫–µ—à–∞
export function cleanupExpiredCache() {
  try {
    if (!fs.existsSync(CACHE_DIR)) {
      return { removed: 0, total: 0 };
    }
    
    const files = fs.readdirSync(CACHE_DIR);
    let removed = 0;
    let total = 0;
    
    for (const file of files) {
      if (file.endsWith('.json')) {
        total++;
        try {
          const cacheFilePath = path.join(CACHE_DIR, file);
          const cacheData = fs.readFileSync(cacheFilePath, 'utf8');
          const cacheEntry = JSON.parse(cacheData);
          
          if (isCacheExpired(cacheEntry.timestamp)) {
            fs.unlinkSync(cacheFilePath);
            removed++;
          }
        } catch (fileError) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ ${file}:`, fileError);
          // –£–¥–∞–ª—è–µ–º –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
          try {
            fs.unlinkSync(path.join(CACHE_DIR, file));
            removed++;
          } catch (unlinkError) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ ${file}:`, unlinkError);
          }
        }
      }
    }
    
    if (removed > 0) {
      console.log(`üßπ –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞: —É–¥–∞–ª–µ–Ω–æ ${removed} –∏–∑ ${total} —Ñ–∞–π–ª–æ–≤`);
    }
    
    return { removed, total };
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ –∫–µ—à–∞:', error);
    return { removed: 0, total: 0, error: error.message };
  }
}

// –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–µ—à–∞
export function getCacheStats() {
  try {
    if (!fs.existsSync(CACHE_DIR)) {
      return {
        totalEntries: 0,
        validEntries: 0,
        expiredEntries: 0,
        cacheSize: 0,
        oldestEntry: null,
        newestEntry: null
      };
    }
    
    const files = fs.readdirSync(CACHE_DIR);
    let totalEntries = 0;
    let validEntries = 0;
    let expiredEntries = 0;
    let cacheSize = 0;
    let oldestTimestamp = Date.now();
    let newestTimestamp = 0;
    
    for (const file of files) {
      if (file.endsWith('.json')) {
        try {
          const cacheFilePath = path.join(CACHE_DIR, file);
          const stats = fs.statSync(cacheFilePath);
          cacheSize += stats.size;
          
          const cacheData = fs.readFileSync(cacheFilePath, 'utf8');
          const cacheEntry = JSON.parse(cacheData);
          
          totalEntries++;
          
          if (isCacheExpired(cacheEntry.timestamp)) {
            expiredEntries++;
          } else {
            validEntries++;
          }
          
          if (cacheEntry.timestamp < oldestTimestamp) {
            oldestTimestamp = cacheEntry.timestamp;
          }
          
          if (cacheEntry.timestamp > newestTimestamp) {
            newestTimestamp = cacheEntry.timestamp;
          }
          
        } catch (fileError) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ${file}:`, fileError);
        }
      }
    }
    
    return {
      totalEntries,
      validEntries,
      expiredEntries,
      cacheSize: Math.round(cacheSize / 1024), // –≤ KB
      oldestEntry: totalEntries > 0 ? new Date(oldestTimestamp).toISOString() : null,
      newestEntry: totalEntries > 0 ? new Date(newestTimestamp).toISOString() : null
    };
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–µ—à–∞:', error);
    return { error: error.message };
  }
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
if (process.env.NODE_ENV !== 'test') {
  setTimeout(() => {
    cleanupExpiredCache();
  }, 1000); // –û—á–∏—â–∞–µ–º —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
}

// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
if (process.env.NODE_ENV !== 'test') {
  setInterval(() => {
    cleanupExpiredCache();
  }, 6 * 60 * 60 * 1000); // 6 —á–∞—Å–æ–≤
}