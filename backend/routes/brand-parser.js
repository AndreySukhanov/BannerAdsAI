import express from 'express';
import axios from 'axios';
import { load } from 'cheerio';
import { OpenAI } from 'openai';
import { setBrandingCache, getBrandingCache, clearBrandingCache, getCacheStats } from '../cache/brand-cache.js';

const router = express.Router();

// Lazy OpenAI initialization to ensure env vars are loaded
let openai = null;
function getOpenAI() {
  if (!openai) {
    openai = new OpenAI({
      apiKey: process.env.OPENAI_API_KEY
    });
  }
  return openai;
}

/**
 * –ü–∞—Ä—Å–∏—Ç –≤–µ–±-—Å–∞–π—Ç –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –±—Ä–µ–Ω–¥–∏–Ω–≥–∞ –∏ —Å—Ç–∏–ª—è
 * @param {string} url - URL —Å–∞–π—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
 * @returns {Object} - –û–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –±—Ä–µ–Ω–¥–∏–Ω–≥–µ
 */
async function parseWebsiteBranding(url) {
  try {
    console.log(`üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∞–π—Ç: ${url}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
    const cachedData = getBrandingCache(url);
    if (cachedData) {
      console.log(`‚ö° –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∫–µ—à –¥–ª—è: ${url}`);
      return cachedData;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const response = await axios.get(url, {
      headers: {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
      },
      timeout: 15000
    });
    
    const $ = load(response.data);
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    const title = $('title').text().trim();
    const description = $('meta[name="description"]').attr('content') || '';
    const keywords = $('meta[name="keywords"]').attr('content') || '';
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–≤–µ—Ç–æ–≤—É—é —Å—Ö–µ–º—É –∏–∑ CSS
    const colors = extractColors(response.data);
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –ª–æ–≥–æ—Ç–∏–ø—ã –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const logos = extractLogos($);
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º —à—Ä–∏—Ñ—Ç—ã
    const fonts = extractFonts($, response.data);
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç–∏–ª–∏ –¥–∏–∑–∞–π–Ω–∞
    const designElements = extractDesignElements($, response.data);
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
    const mainContent = extractMainContent($);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç—Ä–∞—Å–ª—å/–∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å–∞–π—Ç–∞
    const industry = await determineIndustry(title, description, mainContent);
    
    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –±—Ä–µ–Ω–¥–∏–Ω–≥–∞
    const brandingData = {
      url,
      title,
      description,
      keywords,
      colors,
      logos,
      fonts,
      designElements,
      mainContent,
      industry,
      timestamp: new Date().toISOString()
    };
    
    console.log(`‚úÖ –ë—Ä–µ–Ω–¥–∏–Ω–≥ –∏–∑–≤–ª–µ—á–µ–Ω –¥–ª—è: ${title}`);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
    setBrandingCache(url, brandingData);
    
    return brandingData;
    
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ ${url}:`, error.message);
    throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∞–π—Ç: ${error.message}`);
  }
}

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ü–≤–µ—Ç–æ–≤—É—é –ø–∞–ª–∏—Ç—Ä—É –∏–∑ CSS
 */
function extractColors(html) {
  const colors = new Set();
  
  // –ò—â–µ–º CSS —Ü–≤–µ—Ç–∞ –≤ —Å—Ç–∏–ª—è—Ö
  const cssColorRegex = /#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})|rgb\([^)]+\)|rgba\([^)]+\)|hsl\([^)]+\)|hsla\([^)]+\)/g;
  const colorMatches = html.match(cssColorRegex) || [];
  
  colorMatches.forEach(color => {
    if (color !== '#000' && color !== '#fff' && color !== '#ffffff' && color !== '#000000') {
      colors.add(color);
    }
  });
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ü–≤–µ—Ç–æ–≤
  const namedColors = ['red', 'blue', 'green', 'yellow', 'purple', 'orange', 'pink', 'brown'];
  namedColors.forEach(colorName => {
    if (html.toLowerCase().includes(`color: ${colorName}`) || 
        html.toLowerCase().includes(`background: ${colorName}`) ||
        html.toLowerCase().includes(`${colorName}`)) {
      colors.add(colorName);
    }
  });
  
  return Array.from(colors).slice(0, 10); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 10 —Ü–≤–µ—Ç–æ–≤
}

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –ª–æ–≥–æ—Ç–∏–ø—ã –∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
function extractLogos($) {
  const logos = [];
  
  // –ò—â–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ –≤ alt, src –∏–ª–∏ –∫–ª–∞—Å—Å–∞—Ö
  const logoKeywords = ['logo', 'brand', 'header', 'nav', 'brand'];
  
  $('img').each((i, elem) => {
    const src = $(elem).attr('src');
    const alt = $(elem).attr('alt') || '';
    const className = $(elem).attr('class') || '';
    
    if (src && logoKeywords.some(keyword => 
      alt.toLowerCase().includes(keyword) || 
      src.toLowerCase().includes(keyword) ||
      className.toLowerCase().includes(keyword)
    )) {
      logos.push({
        src,
        alt,
        className
      });
    }
  });
  
  return logos.slice(0, 5); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 5 –ª–æ–≥–æ—Ç–∏–ø–æ–≤
}

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —à—Ä–∏—Ñ—Ç–∞—Ö –∏ —Å—Ç–∏–ª—è—Ö —Ç–µ–∫—Å—Ç–∞
 */
function extractFonts($, html) {
  const fonts = new Set();
  const headlineFonts = new Set();
  
  // –ò—â–µ–º Google Fonts
  $('link[href*="fonts.googleapis.com"]').each((i, elem) => {
    const href = $(elem).attr('href');
    if (href) {
      const fontMatch = href.match(/family=([^&:]+)/);
      if (fontMatch) {
        const fontName = fontMatch[1].replace(/\+/g, ' ').replace(/:.*/, '');
        fonts.add(fontName);
      }
    }
  });
  
  // –ò—â–µ–º —à—Ä–∏—Ñ—Ç—ã –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏–∑ –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
  const headlineSelectors = ['h1', 'h2', 'h3', '.headline', '.title', '.news-title', '[class*="title"]', '[class*="headline"]'];
  headlineSelectors.forEach(selector => {
    $(selector).each((i, elem) => {
      const style = $(elem).attr('style');
      if (style) {
        const fontMatch = style.match(/font-family:\s*["']?([^;"']+)["']?/i);
        if (fontMatch) {
          const fontFamily = fontMatch[1].split(',')[0].trim().replace(/["']/g, '');
          if (fontFamily && !fontFamily.toLowerCase().includes('serif') && !fontFamily.toLowerCase().includes('sans-serif')) {
            headlineFonts.add(fontFamily);
          }
        }
      }
    });
  });
  
  // –ò—â–µ–º font-family –≤ CSS —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
  const fontFamilyRegex = /(?:h[1-6]|\.title|\.headline|\.news)[^{]*\{[^}]*font-family:\s*["']?([^;"']+)["']?/gi;
  let match;
  while ((match = fontFamilyRegex.exec(html)) !== null) {
    const fontFamily = match[1].split(',')[0].trim().replace(/["']/g, '');
    if (fontFamily && !fontFamily.toLowerCase().includes('serif') && !fontFamily.toLowerCase().includes('sans-serif')) {
      headlineFonts.add(fontFamily);
    }
  }
  
  // –ò—â–µ–º –≤—Å–µ font-family –≤ CSS
  const allFontRegex = /font-family:\s*["']?([^;"']+)["']?/gi;
  const fontMatches = html.match(allFontRegex) || [];
  
  fontMatches.forEach(match => {
    const fontMatch = match.match(/font-family:\s*["']?([^;"']+)["']?/i);
    if (fontMatch) {
      const fontFamily = fontMatch[1].split(',')[0].trim().replace(/["']/g, '');
      if (fontFamily && !fontFamily.toLowerCase().includes('serif') && !fontFamily.toLowerCase().includes('sans-serif') && fontFamily.length > 2) {
        fonts.add(fontFamily);
      }
    }
  });
  
  // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ—á–Ω—ã–º —à—Ä–∏—Ñ—Ç–∞–º
  const prioritizedFonts = [...headlineFonts, ...fonts];
  return Array.from(new Set(prioritizedFonts)).slice(0, 5);
}

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –¥–∏–∑–∞–π–Ω–∞ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —Å—Ç–∏–ª—è
 */
function extractDesignElements($, html) {
  const designInfo = {
    borderRadius: [],
    shadows: [],
    gradients: [],
    textStyles: {},
    layoutPatterns: []
  };
  
  // –ò—â–µ–º border-radius
  const borderRadiusRegex = /border-radius:\s*([^;]+)/gi;
  const borderMatches = html.match(borderRadiusRegex) || [];
  borderMatches.forEach(match => {
    const value = match.replace('border-radius:', '').trim();
    if (value && !value.includes('0px')) {
      designInfo.borderRadius.push(value);
    }
  });
  
  // –ò—â–µ–º box-shadow
  const shadowRegex = /box-shadow:\s*([^;]+)/gi;
  const shadowMatches = html.match(shadowRegex) || [];
  shadowMatches.forEach(match => {
    const value = match.replace('box-shadow:', '').trim();
    if (value && value !== 'none') {
      designInfo.shadows.push(value);
    }
  });
  
  // –ò—â–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç—ã
  const gradientRegex = /background:\s*[^;]*(?:linear-gradient|radial-gradient)\([^)]+\)/gi;
  const gradientMatches = html.match(gradientRegex) || [];
  gradientMatches.forEach(match => {
    designInfo.gradients.push(match);
  });
  
  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∏–ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
  const headlineElements = $('h1, h2, h3, .headline, .title, .news-title, [class*="title"]').first();
  if (headlineElements.length > 0) {
    const style = headlineElements.attr('style') || '';
    designInfo.textStyles = {
      fontWeight: extractCSSProperty(style, 'font-weight') || 'bold',
      textTransform: extractCSSProperty(style, 'text-transform') || 'none',
      letterSpacing: extractCSSProperty(style, 'letter-spacing') || 'normal',
      lineHeight: extractCSSProperty(style, 'line-height') || '1.2'
    };
  }
  
  return designInfo;
}

/**
 * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è CSS-—Å–≤–æ–π—Å—Ç–≤
 */
function extractCSSProperty(style, property) {
  const regex = new RegExp(`${property}:\\s*([^;]+)`, 'i');
  const match = style.match(regex);
  return match ? match[1].trim() : null;
}

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
 */
function extractMainContent($) {
  // –£–¥–∞–ª—è–µ–º —Å–∫—Ä–∏–ø—Ç—ã, —Å—Ç–∏–ª–∏ –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—é
  $('script, style, nav, header, footer').remove();
  
  // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
  const contentSelectors = ['main', '.content', '.main-content', 'article', '.post', '.page'];
  let mainContent = '';
  
  for (const selector of contentSelectors) {
    const content = $(selector).text();
    if (content && content.length > mainContent.length) {
      mainContent = content;
    }
  }
  
  // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã, –±–µ—Ä–µ–º –∏–∑ body
  if (!mainContent) {
    mainContent = $('body').text();
  }
  
  // –û—á–∏—â–∞–µ–º –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç
  return mainContent
    .replace(/\s+/g, ' ')
    .trim()
    .substring(0, 1000);
}

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ—Ç—Ä–∞—Å–ª—å —Å–∞–π—Ç–∞ —Å –ø–æ–º–æ—â—å—é AI
 */
async function determineIndustry(title, description, content) {
  try {
    const prompt = `–û–ø—Ä–µ–¥–µ–ª–∏ –æ—Ç—Ä–∞—Å–ª—å/–∫–∞—Ç–µ–≥–æ—Ä–∏—é —ç—Ç–æ–≥–æ —Å–∞–π—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:

–ó–∞–≥–æ–ª–æ–≤–æ–∫: ${title}
–û–ø–∏—Å–∞–Ω–∏–µ: ${description}
–ö–æ–Ω—Ç–µ–Ω—Ç: ${content.substring(0, 500)}...

–í—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:
- E-commerce
- Technology
- Healthcare
- Finance
- Education
- Entertainment
- Travel
- Food & Restaurant
- Fashion
- Real Estate
- Automotive
- Sports
- News & Media
- Non-profit
- Business Services
- Other

–û—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º.`;

    const response = await getOpenAI().chat.completions.create({
      model: "gpt-3.5-turbo",
      messages: [
        {
          role: "user",
          content: prompt
        }
      ],
      max_tokens: 50,
      temperature: 0.3
    });

    return response.choices[0].message.content.trim();
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ—Ç—Ä–∞—Å–ª–∏:', error);
    return 'Other';
  }
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è AI –Ω–∞ –æ—Å–Ω–æ–≤–µ –±—Ä–µ–Ω–¥–∏–Ω–≥–∞ —Å–∞–π—Ç–∞
 */
async function generateBrandedPrompt(brandingData, originalPrompt) {
  try {
    const brandPrompt = `–°–æ–∑–¥–∞–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –±–∞–Ω–Ω–µ—Ä–∞ —Å –Ø–†–ö–û –í–´–†–ê–ñ–ï–ù–ù–´–ú –±—Ä–µ–Ω–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å—Ç–∏–ª–µ–º —Å–∞–π—Ç–∞:

–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ë–†–ï–ù–î–ï:
- –ù–∞–∑–≤–∞–Ω–∏–µ: ${brandingData.title}
- –û–ø–∏—Å–∞–Ω–∏–µ: ${brandingData.description}
- –û—Ç—Ä–∞—Å–ª—å: ${brandingData.industry}
- –û—Å–Ω–æ–≤–Ω—ã–µ —Ü–≤–µ—Ç–∞: ${brandingData.colors.slice(0, 3).join(', ')}
- –®—Ä–∏—Ñ—Ç—ã: ${brandingData.fonts.join(', ')}

–û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ô –ü–†–û–ú–ü–¢: ${originalPrompt}

–¢–†–ï–ë–û–í–ê–ù–ò–Ø –ö –ë–†–ï–ù–î–ò–†–û–í–ê–ù–ù–û–ú–£ –î–ò–ó–ê–ô–ù–£:
1. –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –û–°–ù–û–í–ù–´–ï —Ü–≤–µ—Ç–∞ –±—Ä–µ–Ω–¥–∞ (${brandingData.colors.slice(0, 2).join(' –∏ ')}) –∫–∞–∫ –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏–µ —Ü–≤–µ—Ç–∞ —Ñ–æ–Ω–∞ –∏–ª–∏ –∞–∫—Ü–µ–Ω—Ç–æ–≤
2. –í–∫–ª—é—á–∏—Ç—å –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–µ –¥–ª—è –æ—Ç—Ä–∞—Å–ª–∏ "${brandingData.industry}"
3. –î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∏–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –±—Ä–µ–Ω–¥—É "${brandingData.title}"
4. –°–¥–µ–ª–∞—Ç—å –¥–∏–∑–∞–π–Ω –£–ó–ù–ê–í–ê–ï–ú–û —Ñ–∏—Ä–º–µ–Ω–Ω—ã–º —Å —á—ë—Ç–∫–æ–π —Ü–≤–µ—Ç–æ–≤–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
5. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–ø–æ–∑–∏—Ü–∏—é –∏ —Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫—É —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Å—Ç–∏–ª—é –±—Ä–µ–Ω–¥–∞
6. –î–æ–±–∞–≤–∏—Ç—å –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–ª–∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤ —Ñ–∏—Ä–º–µ–Ω–Ω—ã—Ö —Ü–≤–µ—Ç–∞—Ö

–í–ê–ñ–ù–û: –ë—Ä–µ–Ω–¥–∏–Ω–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –•–û–†–û–®–û –ó–ê–ú–ï–¢–ï–ù - –∏—Å–ø–æ–ª—å–∑—É–π —Ñ–∏—Ä–º–µ–Ω–Ω—ã–µ —Ü–≤–µ—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ, –Ω–µ –ø—Ä–æ—Å—Ç–æ –∫–∞–∫ –∞–∫—Ü–µ–Ω—Ç—ã!

–°–æ–∑–¥–∞–π —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è Recraft.ai —Å —É—á—ë—Ç–æ–º –≤—Å–µ—Ö –±—Ä–µ–Ω–¥–∏–Ω–≥–æ–≤—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π:`;

    const response = await getOpenAI().chat.completions.create({
      model: "gpt-4",
      messages: [
        {
          role: "system",
          content: "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –±—Ä–µ–Ω–¥–∏–Ω–≥—É –∏ –¥–∏–∑–∞–π–Ω—É —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –±–∞–Ω–Ω–µ—Ä–æ–≤. –°–æ–∑–¥–∞–≤–∞–π –¥–µ—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è AI –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ —Ç–æ—á–Ω–æ –ø–µ—Ä–µ–¥–∞—é—Ç —Ñ–∏—Ä–º–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å –±—Ä–µ–Ω–¥–æ–≤."
        },
        {
          role: "user",
          content: brandPrompt
        }
      ],
      max_tokens: 350,
      temperature: 0.8
    });

    return response.choices[0].message.content.trim();
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±—Ä–µ–Ω–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞:', error);
    return originalPrompt; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
  }
}

// API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã

/**
 * POST /api/brand-parser/analyze
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–∞–π—Ç –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –±—Ä–µ–Ω–¥–∏–Ω–≥
 */
router.post('/analyze', async (req, res) => {
  try {
    const { url } = req.body;
    
    if (!url) {
      return res.status(400).json({
        success: false,
        error: 'URL –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
      });
    }
    
    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º URL
    try {
      new URL(url);
    } catch {
      return res.status(400).json({
        success: false,
        error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL'
      });
    }
    
    const brandingData = await parseWebsiteBranding(url);
    
    res.json({
      success: true,
      data: brandingData
    });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–∞–π—Ç–∞:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

/**
 * POST /api/brand-parser/generate-prompt
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –±—Ä–µ–Ω–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
 */
router.post('/generate-prompt', async (req, res) => {
  try {
    const { brandingData, originalPrompt } = req.body;
    
    if (!brandingData || !originalPrompt) {
      return res.status(400).json({
        success: false,
        error: 'brandingData –∏ originalPrompt –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'
      });
    }
    
    const brandedPrompt = await generateBrandedPrompt(brandingData, originalPrompt);
    
    res.json({
      success: true,
      data: {
        originalPrompt,
        brandedPrompt,
        brandingInfo: {
          title: brandingData.title,
          industry: brandingData.industry,
          colors: brandingData.colors,
          fonts: brandingData.fonts
        }
      }
    });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–∞:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

/**
 * POST /api/brand-parser/quick-analyze
 * –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ + –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–∞ –≤ –æ–¥–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ
 */
router.post('/quick-analyze', async (req, res) => {
  try {
    const { url, originalPrompt } = req.body;
    
    if (!url || !originalPrompt) {
      return res.status(400).json({
        success: false,
        error: 'URL –∏ originalPrompt –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'
      });
    }
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∞–π—Ç
    const brandingData = await parseWebsiteBranding(url);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±—Ä–µ–Ω–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
    const brandedPrompt = await generateBrandedPrompt(brandingData, originalPrompt);
    
    res.json({
      success: true,
      data: {
        originalPrompt,
        brandedPrompt,
        brandingData,
        suggestion: `–ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω –ø–æ–¥ —Å—Ç–∏–ª—å ${brandingData.title} (${brandingData.industry})`
      }
    });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

/**
 * GET /api/brand-parser/cache/stats
 * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–µ—à–∞
 */
router.get('/cache/stats', async (req, res) => {
  try {
    const stats = getCacheStats();
    
    res.json({
      success: true,
      data: stats
    });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–µ—à–∞:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

/**
 * DELETE /api/brand-parser/cache/clear
 * –û—á–∏—â–∞–µ—Ç –≤–µ—Å—å –∫–µ—à –±—Ä–µ–Ω–¥–∏–Ω–≥–∞
 */
router.delete('/cache/clear', async (req, res) => {
  try {
    const result = clearBrandingCache();
    
    res.json({
      success: true,
      data: result
    });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

export default router;